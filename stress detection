{"nbformat":4,"nbformat_minor":0,"metadata":{"colab":{"provenance":[],"mount_file_id":"1bcHsoaW3kCojgWKvBXNBJt_W_hmVROHx","authorship_tag":"ABX9TyM5t0f2C0EDJrN+RSCDjXDH"},"kernelspec":{"name":"python3","display_name":"Python 3"},"language_info":{"name":"python"}},"cells":[{"cell_type":"code","execution_count":1,"metadata":{"id":"5NGQM1g-tgEF","executionInfo":{"status":"ok","timestamp":1676095965583,"user_tz":-330,"elapsed":2080,"user":{"displayName":"Shaista Daniya","userId":"12707569234039829089"}}},"outputs":[],"source":["import numpy as np \n","import pandas as pd\n","import matplotlib.pyplot as plt\n","import seaborn as sns\n","%matplotlib inline"]},{"cell_type":"code","source":["import os\n","for dirname, _, filenames in os.walk('/content/drive/MyDrive/intern task 2/Stress-Lysis.csv'):\n","    for filename in filenames:\n","        print(os.path.join(dirname, filename))"],"metadata":{"id":"eHKiEK0Tt_7s","executionInfo":{"status":"ok","timestamp":1676095969649,"user_tz":-330,"elapsed":397,"user":{"displayName":"Shaista Daniya","userId":"12707569234039829089"}}},"execution_count":2,"outputs":[]},{"cell_type":"code","source":["data=pd.read_csv('/content/drive/MyDrive/intern task 2/Stress-Lysis.csv')\n","data.head()"],"metadata":{"colab":{"base_uri":"https://localhost:8080/","height":206},"id":"IEswNrxQu57V","executionInfo":{"status":"ok","timestamp":1676095977857,"user_tz":-330,"elapsed":1065,"user":{"displayName":"Shaista Daniya","userId":"12707569234039829089"}},"outputId":"44abc2bd-b477-4a97-84fa-2c1d78dbe9c1"},"execution_count":3,"outputs":[{"output_type":"execute_result","data":{"text/plain":["   Humidity  Temperature  Step_count  Stress_Level\n","0     21.33        90.33         123             1\n","1     21.41        90.41          93             1\n","2     27.12        96.12         196             2\n","3     27.64        96.64         177             2\n","4     10.87        79.87          87             0"],"text/html":["\n","  <div id=\"df-cab220bd-4f78-47de-bd7f-b33bd805b68c\">\n","    <div class=\"colab-df-container\">\n","      <div>\n","<style scoped>\n","    .dataframe tbody tr th:only-of-type {\n","        vertical-align: middle;\n","    }\n","\n","    .dataframe tbody tr th {\n","        vertical-align: top;\n","    }\n","\n","    .dataframe thead th {\n","        text-align: right;\n","    }\n","</style>\n","<table border=\"1\" class=\"dataframe\">\n","  <thead>\n","    <tr style=\"text-align: right;\">\n","      <th></th>\n","      <th>Humidity</th>\n","      <th>Temperature</th>\n","      <th>Step_count</th>\n","      <th>Stress_Level</th>\n","    </tr>\n","  </thead>\n","  <tbody>\n","    <tr>\n","      <th>0</th>\n","      <td>21.33</td>\n","      <td>90.33</td>\n","      <td>123</td>\n","      <td>1</td>\n","    </tr>\n","    <tr>\n","      <th>1</th>\n","      <td>21.41</td>\n","      <td>90.41</td>\n","      <td>93</td>\n","      <td>1</td>\n","    </tr>\n","    <tr>\n","      <th>2</th>\n","      <td>27.12</td>\n","      <td>96.12</td>\n","      <td>196</td>\n","      <td>2</td>\n","    </tr>\n","    <tr>\n","      <th>3</th>\n","      <td>27.64</td>\n","      <td>96.64</td>\n","      <td>177</td>\n","      <td>2</td>\n","    </tr>\n","    <tr>\n","      <th>4</th>\n","      <td>10.87</td>\n","      <td>79.87</td>\n","      <td>87</td>\n","      <td>0</td>\n","    </tr>\n","  </tbody>\n","</table>\n","</div>\n","      <button class=\"colab-df-convert\" onclick=\"convertToInteractive('df-cab220bd-4f78-47de-bd7f-b33bd805b68c')\"\n","              title=\"Convert this dataframe to an interactive table.\"\n","              style=\"display:none;\">\n","        \n","  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n","       width=\"24px\">\n","    <path d=\"M0 0h24v24H0V0z\" fill=\"none\"/>\n","    <path d=\"M18.56 5.44l.94 2.06.94-2.06 2.06-.94-2.06-.94-.94-2.06-.94 2.06-2.06.94zm-11 1L8.5 8.5l.94-2.06 2.06-.94-2.06-.94L8.5 2.5l-.94 2.06-2.06.94zm10 10l.94 2.06.94-2.06 2.06-.94-2.06-.94-.94-2.06-.94 2.06-2.06.94z\"/><path d=\"M17.41 7.96l-1.37-1.37c-.4-.4-.92-.59-1.43-.59-.52 0-1.04.2-1.43.59L10.3 9.45l-7.72 7.72c-.78.78-.78 2.05 0 2.83L4 21.41c.39.39.9.59 1.41.59.51 0 1.02-.2 1.41-.59l7.78-7.78 2.81-2.81c.8-.78.8-2.07 0-2.86zM5.41 20L4 18.59l7.72-7.72 1.47 1.35L5.41 20z\"/>\n","  </svg>\n","      </button>\n","      \n","  <style>\n","    .colab-df-container {\n","      display:flex;\n","      flex-wrap:wrap;\n","      gap: 12px;\n","    }\n","\n","    .colab-df-convert {\n","      background-color: #E8F0FE;\n","      border: none;\n","      border-radius: 50%;\n","      cursor: pointer;\n","      display: none;\n","      fill: #1967D2;\n","      height: 32px;\n","      padding: 0 0 0 0;\n","      width: 32px;\n","    }\n","\n","    .colab-df-convert:hover {\n","      background-color: #E2EBFA;\n","      box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n","      fill: #174EA6;\n","    }\n","\n","    [theme=dark] .colab-df-convert {\n","      background-color: #3B4455;\n","      fill: #D2E3FC;\n","    }\n","\n","    [theme=dark] .colab-df-convert:hover {\n","      background-color: #434B5C;\n","      box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n","      filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n","      fill: #FFFFFF;\n","    }\n","  </style>\n","\n","      <script>\n","        const buttonEl =\n","          document.querySelector('#df-cab220bd-4f78-47de-bd7f-b33bd805b68c button.colab-df-convert');\n","        buttonEl.style.display =\n","          google.colab.kernel.accessAllowed ? 'block' : 'none';\n","\n","        async function convertToInteractive(key) {\n","          const element = document.querySelector('#df-cab220bd-4f78-47de-bd7f-b33bd805b68c');\n","          const dataTable =\n","            await google.colab.kernel.invokeFunction('convertToInteractive',\n","                                                     [key], {});\n","          if (!dataTable) return;\n","\n","          const docLinkHtml = 'Like what you see? Visit the ' +\n","            '<a target=\"_blank\" href=https://colab.research.google.com/notebooks/data_table.ipynb>data table notebook</a>'\n","            + ' to learn more about interactive tables.';\n","          element.innerHTML = '';\n","          dataTable['output_type'] = 'display_data';\n","          await google.colab.output.renderOutput(dataTable, element);\n","          const docLink = document.createElement('div');\n","          docLink.innerHTML = docLinkHtml;\n","          element.appendChild(docLink);\n","        }\n","      </script>\n","    </div>\n","  </div>\n","  "]},"metadata":{},"execution_count":3}]},{"cell_type":"code","source":["data.shape"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"Cdq4CotXvLqD","executionInfo":{"status":"ok","timestamp":1676095981669,"user_tz":-330,"elapsed":380,"user":{"displayName":"Shaista Daniya","userId":"12707569234039829089"}},"outputId":"9775401a-7354-4b44-cf23-c1dca8ae493f"},"execution_count":4,"outputs":[{"output_type":"execute_result","data":{"text/plain":["(2001, 4)"]},"metadata":{},"execution_count":4}]},{"cell_type":"code","source":["data.info() "],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"_qSfGKvAvPbn","executionInfo":{"status":"ok","timestamp":1676095983997,"user_tz":-330,"elapsed":4,"user":{"displayName":"Shaista Daniya","userId":"12707569234039829089"}},"outputId":"226911cc-8724-4898-8836-0b05c58bc253"},"execution_count":5,"outputs":[{"output_type":"stream","name":"stdout","text":["<class 'pandas.core.frame.DataFrame'>\n","RangeIndex: 2001 entries, 0 to 2000\n","Data columns (total 4 columns):\n"," #   Column        Non-Null Count  Dtype  \n","---  ------        --------------  -----  \n"," 0   Humidity      2001 non-null   float64\n"," 1   Temperature   2001 non-null   float64\n"," 2   Step_count    2001 non-null   int64  \n"," 3   Stress_Level  2001 non-null   int64  \n","dtypes: float64(2), int64(2)\n","memory usage: 62.7 KB\n"]}]},{"cell_type":"code","source":["data.describe()"],"metadata":{"colab":{"base_uri":"https://localhost:8080/","height":300},"id":"3iC47eEXvSnu","executionInfo":{"status":"ok","timestamp":1676095986895,"user_tz":-330,"elapsed":420,"user":{"displayName":"Shaista Daniya","userId":"12707569234039829089"}},"outputId":"bc4cdbe0-281d-428a-9d63-9dae80e66897"},"execution_count":6,"outputs":[{"output_type":"execute_result","data":{"text/plain":["          Humidity  Temperature   Step_count  Stress_Level\n","count  2001.000000  2001.000000  2001.000000   2001.000000\n","mean     20.000000    89.000000   100.141429      1.104448\n","std       5.777833     5.777833    58.182948      0.771094\n","min      10.000000    79.000000     0.000000      0.000000\n","25%      15.000000    84.000000    50.000000      0.000000\n","50%      20.000000    89.000000   101.000000      1.000000\n","75%      25.000000    94.000000   150.000000      2.000000\n","max      30.000000    99.000000   200.000000      2.000000"],"text/html":["\n","  <div id=\"df-ae8f0426-9812-4445-b2fc-0a3edd1babf4\">\n","    <div class=\"colab-df-container\">\n","      <div>\n","<style scoped>\n","    .dataframe tbody tr th:only-of-type {\n","        vertical-align: middle;\n","    }\n","\n","    .dataframe tbody tr th {\n","        vertical-align: top;\n","    }\n","\n","    .dataframe thead th {\n","        text-align: right;\n","    }\n","</style>\n","<table border=\"1\" class=\"dataframe\">\n","  <thead>\n","    <tr style=\"text-align: right;\">\n","      <th></th>\n","      <th>Humidity</th>\n","      <th>Temperature</th>\n","      <th>Step_count</th>\n","      <th>Stress_Level</th>\n","    </tr>\n","  </thead>\n","  <tbody>\n","    <tr>\n","      <th>count</th>\n","      <td>2001.000000</td>\n","      <td>2001.000000</td>\n","      <td>2001.000000</td>\n","      <td>2001.000000</td>\n","    </tr>\n","    <tr>\n","      <th>mean</th>\n","      <td>20.000000</td>\n","      <td>89.000000</td>\n","      <td>100.141429</td>\n","      <td>1.104448</td>\n","    </tr>\n","    <tr>\n","      <th>std</th>\n","      <td>5.777833</td>\n","      <td>5.777833</td>\n","      <td>58.182948</td>\n","      <td>0.771094</td>\n","    </tr>\n","    <tr>\n","      <th>min</th>\n","      <td>10.000000</td>\n","      <td>79.000000</td>\n","      <td>0.000000</td>\n","      <td>0.000000</td>\n","    </tr>\n","    <tr>\n","      <th>25%</th>\n","      <td>15.000000</td>\n","      <td>84.000000</td>\n","      <td>50.000000</td>\n","      <td>0.000000</td>\n","    </tr>\n","    <tr>\n","      <th>50%</th>\n","      <td>20.000000</td>\n","      <td>89.000000</td>\n","      <td>101.000000</td>\n","      <td>1.000000</td>\n","    </tr>\n","    <tr>\n","      <th>75%</th>\n","      <td>25.000000</td>\n","      <td>94.000000</td>\n","      <td>150.000000</td>\n","      <td>2.000000</td>\n","    </tr>\n","    <tr>\n","      <th>max</th>\n","      <td>30.000000</td>\n","      <td>99.000000</td>\n","      <td>200.000000</td>\n","      <td>2.000000</td>\n","    </tr>\n","  </tbody>\n","</table>\n","</div>\n","      <button class=\"colab-df-convert\" onclick=\"convertToInteractive('df-ae8f0426-9812-4445-b2fc-0a3edd1babf4')\"\n","              title=\"Convert this dataframe to an interactive table.\"\n","              style=\"display:none;\">\n","        \n","  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n","       width=\"24px\">\n","    <path d=\"M0 0h24v24H0V0z\" fill=\"none\"/>\n","    <path d=\"M18.56 5.44l.94 2.06.94-2.06 2.06-.94-2.06-.94-.94-2.06-.94 2.06-2.06.94zm-11 1L8.5 8.5l.94-2.06 2.06-.94-2.06-.94L8.5 2.5l-.94 2.06-2.06.94zm10 10l.94 2.06.94-2.06 2.06-.94-2.06-.94-.94-2.06-.94 2.06-2.06.94z\"/><path d=\"M17.41 7.96l-1.37-1.37c-.4-.4-.92-.59-1.43-.59-.52 0-1.04.2-1.43.59L10.3 9.45l-7.72 7.72c-.78.78-.78 2.05 0 2.83L4 21.41c.39.39.9.59 1.41.59.51 0 1.02-.2 1.41-.59l7.78-7.78 2.81-2.81c.8-.78.8-2.07 0-2.86zM5.41 20L4 18.59l7.72-7.72 1.47 1.35L5.41 20z\"/>\n","  </svg>\n","      </button>\n","      \n","  <style>\n","    .colab-df-container {\n","      display:flex;\n","      flex-wrap:wrap;\n","      gap: 12px;\n","    }\n","\n","    .colab-df-convert {\n","      background-color: #E8F0FE;\n","      border: none;\n","      border-radius: 50%;\n","      cursor: pointer;\n","      display: none;\n","      fill: #1967D2;\n","      height: 32px;\n","      padding: 0 0 0 0;\n","      width: 32px;\n","    }\n","\n","    .colab-df-convert:hover {\n","      background-color: #E2EBFA;\n","      box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n","      fill: #174EA6;\n","    }\n","\n","    [theme=dark] .colab-df-convert {\n","      background-color: #3B4455;\n","      fill: #D2E3FC;\n","    }\n","\n","    [theme=dark] .colab-df-convert:hover {\n","      background-color: #434B5C;\n","      box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n","      filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n","      fill: #FFFFFF;\n","    }\n","  </style>\n","\n","      <script>\n","        const buttonEl =\n","          document.querySelector('#df-ae8f0426-9812-4445-b2fc-0a3edd1babf4 button.colab-df-convert');\n","        buttonEl.style.display =\n","          google.colab.kernel.accessAllowed ? 'block' : 'none';\n","\n","        async function convertToInteractive(key) {\n","          const element = document.querySelector('#df-ae8f0426-9812-4445-b2fc-0a3edd1babf4');\n","          const dataTable =\n","            await google.colab.kernel.invokeFunction('convertToInteractive',\n","                                                     [key], {});\n","          if (!dataTable) return;\n","\n","          const docLinkHtml = 'Like what you see? Visit the ' +\n","            '<a target=\"_blank\" href=https://colab.research.google.com/notebooks/data_table.ipynb>data table notebook</a>'\n","            + ' to learn more about interactive tables.';\n","          element.innerHTML = '';\n","          dataTable['output_type'] = 'display_data';\n","          await google.colab.output.renderOutput(dataTable, element);\n","          const docLink = document.createElement('div');\n","          docLink.innerHTML = docLinkHtml;\n","          element.appendChild(docLink);\n","        }\n","      </script>\n","    </div>\n","  </div>\n","  "]},"metadata":{},"execution_count":6}]},{"cell_type":"code","source":["data['Stress_Level'].unique()"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"v4wp4FKevVWK","executionInfo":{"status":"ok","timestamp":1676095990595,"user_tz":-330,"elapsed":351,"user":{"displayName":"Shaista Daniya","userId":"12707569234039829089"}},"outputId":"1d92dd26-4d25-463b-d938-5520d79520b1"},"execution_count":7,"outputs":[{"output_type":"execute_result","data":{"text/plain":["array([1, 2, 0])"]},"metadata":{},"execution_count":7}]},{"cell_type":"code","source":["data.isnull().sum()\n"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"VqQAFz7JvZBz","executionInfo":{"status":"ok","timestamp":1676095994866,"user_tz":-330,"elapsed":387,"user":{"displayName":"Shaista Daniya","userId":"12707569234039829089"}},"outputId":"51e22225-c5dd-4408-a54c-0b69fc67a87b"},"execution_count":8,"outputs":[{"output_type":"execute_result","data":{"text/plain":["Humidity        0\n","Temperature     0\n","Step_count      0\n","Stress_Level    0\n","dtype: int64"]},"metadata":{},"execution_count":8}]},{"cell_type":"code","source":["data.duplicated().sum()\n"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"8LwRJ6dpvZNE","executionInfo":{"status":"ok","timestamp":1676095998510,"user_tz":-330,"elapsed":375,"user":{"displayName":"Shaista Daniya","userId":"12707569234039829089"}},"outputId":"bef6c834-aa6e-443b-fa9b-6398586b7b53"},"execution_count":9,"outputs":[{"output_type":"execute_result","data":{"text/plain":["0"]},"metadata":{},"execution_count":9}]},{"cell_type":"code","source":["data.skew()\n"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"p4EkU9hPvgRx","executionInfo":{"status":"ok","timestamp":1676096001925,"user_tz":-330,"elapsed":367,"user":{"displayName":"Shaista Daniya","userId":"12707569234039829089"}},"outputId":"9bc20748-a357-446b-f67c-0b22b43bb7f1"},"execution_count":10,"outputs":[{"output_type":"execute_result","data":{"text/plain":["Humidity        1.179993e-18\n","Temperature    -1.297993e-17\n","Step_count     -6.998237e-03\n","Stress_Level   -1.811032e-01\n","dtype: float64"]},"metadata":{},"execution_count":10}]},{"cell_type":"code","source":["plt.figure(figsize=(4,4))\n","plt.boxplot(data)\n","plt.show()"],"metadata":{"colab":{"base_uri":"https://localhost:8080/","height":265},"id":"kMMHXotdvjg8","executionInfo":{"status":"ok","timestamp":1676096037383,"user_tz":-330,"elapsed":32228,"user":{"displayName":"Shaista Daniya","userId":"12707569234039829089"}},"outputId":"1ac32a09-20b6-4cb8-9c8e-bd3ea9f09d3e"},"execution_count":11,"outputs":[{"output_type":"display_data","data":{"text/plain":["<Figure size 288x288 with 1 Axes>"],"image/png":"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\n"},"metadata":{"needs_background":"light"}}]},{"cell_type":"code","source":["from sklearn.model_selection import train_test_split\n","X=data.drop(['Stress_Level'],axis=1)\n","y=data['Stress_Level']\n","X_train,X_test,y_train,y_test = train_test_split(X,y,test_size=0.2,random_state=2)"],"metadata":{"id":"nuUns6EcvmUK","executionInfo":{"status":"ok","timestamp":1676096042591,"user_tz":-330,"elapsed":1796,"user":{"displayName":"Shaista Daniya","userId":"12707569234039829089"}}},"execution_count":12,"outputs":[]},{"cell_type":"code","source":["from sklearn.linear_model import LogisticRegression\n","regressor = LogisticRegression(C=1.0,random_state=2)\n","regressor.fit(X_train,y_train)"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"g3rPM-2Xv28U","executionInfo":{"status":"ok","timestamp":1676096044989,"user_tz":-330,"elapsed":8,"user":{"displayName":"Shaista Daniya","userId":"12707569234039829089"}},"outputId":"80023d7f-87d5-4903-b252-0080013f6b05"},"execution_count":13,"outputs":[{"output_type":"stream","name":"stderr","text":["/usr/local/lib/python3.8/dist-packages/sklearn/linear_model/_logistic.py:814: ConvergenceWarning: lbfgs failed to converge (status=1):\n","STOP: TOTAL NO. of ITERATIONS REACHED LIMIT.\n","\n","Increase the number of iterations (max_iter) or scale the data as shown in:\n","    https://scikit-learn.org/stable/modules/preprocessing.html\n","Please also refer to the documentation for alternative solver options:\n","    https://scikit-learn.org/stable/modules/linear_model.html#logistic-regression\n","  n_iter_i = _check_optimize_result(\n"]},{"output_type":"execute_result","data":{"text/plain":["LogisticRegression(random_state=2)"]},"metadata":{},"execution_count":13}]},{"cell_type":"code","source":["from sklearn.metrics import accuracy_score, confusion_matrix\n","prediction = regressor.predict(X_test)\n","confusionmatrix = confusion_matrix(y_test,prediction)\n","print(confusionmatrix)\n"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"ssPD03KHv82i","executionInfo":{"status":"ok","timestamp":1676096049637,"user_tz":-330,"elapsed":381,"user":{"displayName":"Shaista Daniya","userId":"12707569234039829089"}},"outputId":"f28d2064-0605-483e-c4d7-25cbd95bf496"},"execution_count":14,"outputs":[{"output_type":"stream","name":"stdout","text":["[[ 83   0   0]\n"," [  0 166   0]\n"," [  0   0 152]]\n"]}]},{"cell_type":"code","source":["print(accuracy_score(y_test,prediction))\n"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"bvVT_bc7v-hU","executionInfo":{"status":"ok","timestamp":1676096053246,"user_tz":-330,"elapsed":382,"user":{"displayName":"Shaista Daniya","userId":"12707569234039829089"}},"outputId":"cd70ccee-3e5f-43be-8615-64a05b1beedc"},"execution_count":15,"outputs":[{"output_type":"stream","name":"stdout","text":["1.0\n"]}]},{"cell_type":"code","source":["from sklearn.ensemble import RandomForestClassifier\n","model=RandomForestClassifier(n_estimators=100,max_depth=3,random_state=0)\n","model.fit(X,y)\n","prediction = model.predict(X_test)\n","confusionmatrix = confusion_matrix(y_test,prediction)\n","print(confusionmatrix)"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"_5RLUci8wBq0","executionInfo":{"status":"ok","timestamp":1676096056802,"user_tz":-330,"elapsed":13,"user":{"displayName":"Shaista Daniya","userId":"12707569234039829089"}},"outputId":"325ef229-8084-49e4-c984-8bb2218e8c7e"},"execution_count":16,"outputs":[{"output_type":"stream","name":"stdout","text":["[[ 83   0   0]\n"," [  0 166   0]\n"," [  0   0 152]]\n"]}]},{"cell_type":"code","source":["print(accuracy_score(y_test,prediction))\n"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"7zLL85x6wFi5","executionInfo":{"status":"ok","timestamp":1676096061093,"user_tz":-330,"elapsed":384,"user":{"displayName":"Shaista Daniya","userId":"12707569234039829089"}},"outputId":"49a2a65a-0529-46b6-bbec-25a8d02bad25"},"execution_count":17,"outputs":[{"output_type":"stream","name":"stdout","text":["1.0\n"]}]},{"cell_type":"code","source":["from sklearn.svm import SVC\n","classifier = SVC(kernel='linear', random_state=0)  \n","classifier.fit(X_train, y_train)"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"zDLKVS9RwU8Q","executionInfo":{"status":"ok","timestamp":1676096064375,"user_tz":-330,"elapsed":381,"user":{"displayName":"Shaista Daniya","userId":"12707569234039829089"}},"outputId":"ffde0aaf-b9b2-4dcc-97ef-e4a69b45b158"},"execution_count":18,"outputs":[{"output_type":"execute_result","data":{"text/plain":["SVC(kernel='linear', random_state=0)"]},"metadata":{},"execution_count":18}]},{"cell_type":"code","source":["y_predict= classifier.predict(X_test)\n","score=accuracy_score(y_test,y_predict)\n","print(score)"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"acGVd93VwY_P","executionInfo":{"status":"ok","timestamp":1676096068509,"user_tz":-330,"elapsed":382,"user":{"displayName":"Shaista Daniya","userId":"12707569234039829089"}},"outputId":"5b6aa974-bac9-445f-b9c7-4eed97d9245f"},"execution_count":19,"outputs":[{"output_type":"stream","name":"stdout","text":["1.0\n"]}]},{"cell_type":"code","source":["import pickle"],"metadata":{"id":"8UCDgFAEwcao","executionInfo":{"status":"ok","timestamp":1676096071078,"user_tz":-330,"elapsed":368,"user":{"displayName":"Shaista Daniya","userId":"12707569234039829089"}}},"execution_count":20,"outputs":[]},{"cell_type":"code","source":["filename = 'stress_trained.sav'\n","pickle.dump(classifier,open(filename,'wb'))"],"metadata":{"id":"RyBqEa_Dwe4i","executionInfo":{"status":"ok","timestamp":1676096074599,"user_tz":-330,"elapsed":378,"user":{"displayName":"Shaista Daniya","userId":"12707569234039829089"}}},"execution_count":21,"outputs":[]},{"cell_type":"code","source":["loaded_model = pickle.load(open('stress_trained.sav','rb'))"],"metadata":{"id":"tRdQbBRwwhly","executionInfo":{"status":"ok","timestamp":1676096077511,"user_tz":-330,"elapsed":6,"user":{"displayName":"Shaista Daniya","userId":"12707569234039829089"}}},"execution_count":22,"outputs":[]},{"cell_type":"code","source":["input_data = (11.05,80.05,14)\n"],"metadata":{"id":"eC3sypp8wnMl","executionInfo":{"status":"ok","timestamp":1676096082745,"user_tz":-330,"elapsed":367,"user":{"displayName":"Shaista Daniya","userId":"12707569234039829089"}}},"execution_count":23,"outputs":[]},{"cell_type":"code","source":["id_np_array = np.asarray(input_data)\n","id_reshaped = id_np_array.reshape(1,-1)\n","\n","prediction = classifier.predict(id_reshaped)\n","print(prediction)\n","\n","if(prediction[0]==0):\n","    print(\"Stress Level: LOW\")\n","elif(prediction[0]==1):\n","    print(\"Stress Level: MEDIUM\")\n","else:\n","    print(\"Stress Level: HIGH\")"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"wR1OvDkcw2QF","executionInfo":{"status":"ok","timestamp":1676096086284,"user_tz":-330,"elapsed":10,"user":{"displayName":"Shaista Daniya","userId":"12707569234039829089"}},"outputId":"d3e5249d-410b-4244-d21b-bd5fac5a39a5"},"execution_count":24,"outputs":[{"output_type":"stream","name":"stdout","text":["[0]\n","Stress Level: LOW\n"]},{"output_type":"stream","name":"stderr","text":["/usr/local/lib/python3.8/dist-packages/sklearn/base.py:450: UserWarning: X does not have valid feature names, but SVC was fitted with feature names\n","  warnings.warn(\n"]}]},{"cell_type":"code","source":["input_data = (21.38,90.38,128)"],"metadata":{"id":"3Q00mDlPw5KG","executionInfo":{"status":"ok","timestamp":1676096091633,"user_tz":-330,"elapsed":373,"user":{"displayName":"Shaista Daniya","userId":"12707569234039829089"}}},"execution_count":25,"outputs":[]},{"cell_type":"code","source":["id_np_array = np.asarray(input_data)\n","id_reshaped = id_np_array.reshape(1,-1)\n","\n","prediction = classifier.predict(id_reshaped)\n","print(prediction)\n","\n","if(prediction[0]==0):\n","    print(\"Stress Level: LOW\")\n","elif(prediction[0]==1):\n","    print(\"Stress Level: MEDIUM\")\n","else:\n","    print(\"Stress Level: HIGH\")\n","    \n","input_data = (25.41,94.41,167)"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"gE3KC7kTw8g1","executionInfo":{"status":"ok","timestamp":1676096095659,"user_tz":-330,"elapsed":385,"user":{"displayName":"Shaista Daniya","userId":"12707569234039829089"}},"outputId":"384cdef7-f285-43ad-8b37-05174b6625f2"},"execution_count":26,"outputs":[{"output_type":"stream","name":"stdout","text":["[1]\n","Stress Level: MEDIUM\n"]},{"output_type":"stream","name":"stderr","text":["/usr/local/lib/python3.8/dist-packages/sklearn/base.py:450: UserWarning: X does not have valid feature names, but SVC was fitted with feature names\n","  warnings.warn(\n"]}]},{"cell_type":"code","source":["id_np_array = np.asarray(input_data)\n","id_reshaped = id_np_array.reshape(1,-1)\n","\n","prediction = classifier.predict(id_reshaped)\n","print(prediction)\n","\n","if(prediction[0]==0):\n","    print(\"Stress Level: LOW\")\n","elif(prediction[0]==1):\n","    print(\"Stress Level: MEDIUM\")\n","else:\n","    print(\"Stress Level: HIGH\")"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"6tjqdhhwxAxs","executionInfo":{"status":"ok","timestamp":1676096100108,"user_tz":-330,"elapsed":379,"user":{"displayName":"Shaista Daniya","userId":"12707569234039829089"}},"outputId":"39251d62-d3b6-4959-af3d-bbb6347a3594"},"execution_count":27,"outputs":[{"output_type":"stream","name":"stdout","text":["[2]\n","Stress Level: HIGH\n"]},{"output_type":"stream","name":"stderr","text":["/usr/local/lib/python3.8/dist-packages/sklearn/base.py:450: UserWarning: X does not have valid feature names, but SVC was fitted with feature names\n","  warnings.warn(\n"]}]},{"cell_type":"code","source":["import numpy as np\n","import pickle"],"metadata":{"id":"kTQCZWrsxEhN","executionInfo":{"status":"ok","timestamp":1676096103187,"user_tz":-330,"elapsed":377,"user":{"displayName":"Shaista Daniya","userId":"12707569234039829089"}}},"execution_count":28,"outputs":[]},{"cell_type":"code","source":["loaded_model = pickle.load(open('stress_trained.sav','rb'))"],"metadata":{"id":"CTH8YQ7RxKQY","executionInfo":{"status":"ok","timestamp":1676096105892,"user_tz":-330,"elapsed":358,"user":{"displayName":"Shaista Daniya","userId":"12707569234039829089"}}},"execution_count":29,"outputs":[]},{"cell_type":"code","source":["input_data = (25.41,94.41,167)"],"metadata":{"id":"lmbGGdmuxMC9","executionInfo":{"status":"ok","timestamp":1676096108566,"user_tz":-330,"elapsed":360,"user":{"displayName":"Shaista Daniya","userId":"12707569234039829089"}}},"execution_count":30,"outputs":[]},{"cell_type":"code","source":["id_np_array = np.asarray(input_data)\n","id_reshaped = id_np_array.reshape(1,-1)\n","\n","prediction = loaded_model.predict(id_reshaped)\n","print(prediction)\n","\n","if(prediction[0]==0):\n","    print(\"Stress Level: LOW\")\n","elif(prediction[0]==1):\n","    print(\"Stress Level: MEDIUM\")\n","else:\n","    print(\"Stress Level: HIGH\")"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"Apn5HsOJxVoj","executionInfo":{"status":"ok","timestamp":1676096111504,"user_tz":-330,"elapsed":4,"user":{"displayName":"Shaista Daniya","userId":"12707569234039829089"}},"outputId":"cb37e3dd-d002-4920-c0d9-a1985b92a099"},"execution_count":31,"outputs":[{"output_type":"stream","name":"stdout","text":["[2]\n","Stress Level: HIGH\n"]},{"output_type":"stream","name":"stderr","text":["/usr/local/lib/python3.8/dist-packages/sklearn/base.py:450: UserWarning: X does not have valid feature names, but SVC was fitted with feature names\n","  warnings.warn(\n"]}]}]}